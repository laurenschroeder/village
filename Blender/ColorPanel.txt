import bpy


class ColorOperatorBase(bpy.types.Operator):
    bl_label = "Base Color"
    color = (1, 1, 1)

    def execute(self, context):
        bpy.data.brushes["TexDraw"].color = self.color
        return {'FINISHED'}


class DynamicColorOperator(ColorOperatorBase):
    bl_idname = "example.dynamic_color"
    bl_label = "Dynamic Color"

    color: bpy.props.FloatVectorProperty(
        name="Color",
        subtype='COLOR',
        size=3,
        min=0.0,
        max=1.0,
        default=(1, 1, 1)
    )

    def execute(self, context):
        bpy.data.brushes["TexDraw"].color = self.color
        return {'FINISHED'}


class VIEW3D_PT_texture_picker(bpy.types.Panel):
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "Wallpaper"
    bl_label = "Select Village Texture"

    def draw(self, context):
        row = self.layout.row()
        row.operator("paint.brush_colors_flip", text="Previous Color")

        color_definitions = [
            {"name": "Red Wrapping Paper", "color": (1, 0, 0)},
            {"name": "Neon Lights", "color": (1, 1, 0)},
            {"name": "Candies", "color": (0, 0, 1)},
            {"name": "Green Wrapping Paper", "color": (0, 1, 0)},
            {"name": "Candy Sticks", "color": (1, .5, 0)},
            {"name": "Purple Fractal", "color": (1, 0, 1)},
            {"name": "Flash", "color": (0, 0, 0)},
            {"name": "GeoGingerbread", "color": (1, 1, 1)},
        ]

        for color_def in color_definitions:
            dynamic_operator = self.layout.operator(
                DynamicColorOperator.bl_idname, text=color_def["name"]
            )
            dynamic_operator.color = color_def["color"]
            #dynamic_operator.draw_color = color_def["color"]
  

classes = (DynamicColorOperator, VIEW3D_PT_texture_picker)

def register():
    bpy.utils.register_class(VIEW3D_PT_texture_picker)
    bpy.utils.register_class(DynamicColorOperator)


def unregister():
    bpy.utils.unregister_class(VIEW3D_PT_texture_picker)
    bpy.utils.unregister_class(DynamicColorOperator)


if __name__ == "__main__":
    register()
    print(bpy.data.brushes["TexDraw"].color)