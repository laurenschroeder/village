
import bpy



class MakeItRed(bpy.types.Operator):
    bl_idname = "example.red"
    bl_label = "Red"

    def execute(self, context):
        bpy.data.brushes["TexDraw"].color = (1, 0, 0)
        return {'FINISHED'}

    
class MakeItBlue(bpy.types.Operator):
    bl_idname = "example.blue"
    bl_label = "Blue"

    def execute(self, context):
        bpy.data.brushes["TexDraw"].color = (0, 0, 1)
        return {'FINISHED'}

class MakeItGreen(bpy.types.Operator):
    bl_idname = "example.green"
    bl_label = "Green"

    def execute(self, context):
        bpy.data.brushes["TexDraw"].color = (0, 1, 0)
        return {'FINISHED'}
    
class VIEW3D_PT_texture_picker(bpy.types.Panel):
    
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    
    bl_category = "Wallpaper"
    bl_label = "Select Village Texture"
    



    def draw(self, context):
        """define the layout of the panel"""
        row = self.layout.row()
       # painter = row.operator('data.brushes["TexDraw"]')
        row.operator("paint.brush_colors_flip", text="Previous Color")
     
        self.layout.operator(MakeItRed.bl_idname)
        self.layout.operator(MakeItBlue.bl_idname)
        self.layout.operator(MakeItGreen.bl_idname)
       # painter.color=(0.322277, 0.317474, 1)
      #  row.operator('paint.brush_color', text="Hello World Operator").color=(0.322277, 0.317474, 0)
      #  bpy.data.brushes["TexDraw"].color = (0.322277, 0.317474, 1)

classes = (MakeItRed, MakeItBlue, MakeItGreen)
        
def register():
    bpy.utils.register_class(VIEW3D_PT_texture_picker)
    for cls in classes:
        bpy.utils.register_class(cls)
    
def unregister():
    bpy.utils.unregister_class(VIEW3D_PT_texture_picker)
    
    
if __name__=="__main__":
    register()
    print(bpy.data.brushes["TexDraw"].color)